When just defining the Base default, copy and move constructor
and the Derived default, copy and move constructor we get the following output:

Derived test1:
Base default constructor
derived default constructor

 Derived test2(test1):
Base default constructor
Derived copy constructor

 Derived test3(move(test2)):
Base default constructor
Derived move constructor

So in all three cases the Base default constructor is used. After which the
Derived default, copy or move constructor is called. So first a Base object is
created then this is turned into a Derived object. And the values of this
new derived object are assigned according to the called constructor.

Changing the code of derived constructors by adding :
:Base::Base(), :Base::Base(other) and :Base::Base(tmp) before the function body
of the default, copy and move constructors respectively makes the compiler use
the desired Base constructors. So now we have the following output:

Derived test1:
Base default constructor
Derived default constructor

Derived test2(test1):
Base copy constructor
Derived copy constructor

Derived test3(move(test2)):
Base move constructor
Derived move constructor

So now the Base copy constructor is used when we use copy a Derived object
and the Base move constructor is used when we move a Derived object.

By removing the removing the const from the function parameter of the Derived
copy constructor and calling the Base move constructor before the function body
the derived copy constructor will call the Base move constructor when called.

By calling the Base copy constructor before the body of the Derived move
constructor the compiler will use the Base copy constructor when the Derived
move constructor is called.
