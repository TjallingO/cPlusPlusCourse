// Generated by Flexc++ V2.06.02 on Fri, 15 Mar 2019 17:38:07 +0100

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"
#include <string>


// $insert classHead
class Scanner: public ScannerBase
{
        size_t d_counter = 0;

    public:
        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile);
        Scanner(std::string const &infile, std::string const &outfile);

        // $insert lexFunctionDecl
        int lex();

        std::string counter();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);
                            // re-implement this function for code that must
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}

inline Scanner::Scanner(std::string const &infile)
:   ScannerBase(infile, infile + ".tmp")
{}


inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{}

inline std::string Scanner::counter()
{
  return std::to_string(++d_counter);
}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex__();
}

inline void Scanner::preCode()
{
    // optionally replace by your own code
}

inline void Scanner::postCode(PostEnum__ type)
{
    // optionally replace by your own code
}

inline void Scanner::print()
{
    print__();
}


#endif // Scanner_H_INCLUDED_
