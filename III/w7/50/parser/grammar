%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT
        QUIT
        LIST

%right  '='
%left   '+' '-' '*' '/' '<' '>' '~' '^' '|' '%' '&'
%right  uMinus

// %debug

%%

lines:
  lines line
|
  line
;


line:
  expr '\n'
  {
    display($1);
  }
|
  QUIT
  {
    done();
  }
|
  LIST
  {
    list();
  }
|
  error '\n'
  {
    prompt();
  }
|
  '\n'
  {
    prompt();
  }
;


expr:
  NUMBER
  {
    $$ = value();
  }
|
  IDENT
  {
    $$ = variable();
  }
|
expr '-''=' expr
  {
    $$ = subassignment($1, $4);
  }
|
expr '+''=' expr
  {
    $$ = addassignment($1, $4);
  }
|
expr '%''=' expr
  {
    $$ = modassignment($1, $4);
  }
|
expr '/''=' expr
  {
    $$ = divassignment($1, $4);
  }
|
  expr '*''=' expr
  {
    $$ = mulassignment($1, $4);
  }
|
  expr '|' expr
  {
    $$ = Bor($1, $3);
  }
|
  expr '^' expr
  {
    $$ = Bxor($1, $3);
  }
|
  expr '&' expr
  {
    $$ = Band($1, $3);
  }
|
  expr '<''<' expr
  {
    $$ = shiftLeft($1, $4);
  }
|
  expr '>''>' expr
  {
    $$ = shiftRight($1, $4);
  }
|
  '~' expr
  {
    $$ = complement($1);
  }
|
  '-' expr      %prec uMinus
  {
    $$ = negate($2);
  }
|
  expr '+' expr
  {
    $$ = add($1, $3);
  }
|
  expr '-' expr
  {
    $$ = sub($1, $3);
  }
|
  expr '%' expr
  {
    $$ = mod($1, $3);
  }
|
  expr '/' expr
  {
    $$ = divide($1, $3);
  }
|
  expr '*' expr
  {
    $$ = multiply($1, $3);
  }
|
  '(' expr ')'
  {
    $$ = $2;
  }
|
  expr '=' expr
  {
    $$ = assign($1, $3);
  }
;
