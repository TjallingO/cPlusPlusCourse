
----------------------------------------------------------------------------
  definition:         rewrite:
----------------------------------------------------------------------------
  int x[8];           x[3] = x[2];

pointer notation:    *(x + 3) = *(x + 2)
       semantics:    x + 3 points to the location of the 3th int beyond x.
                     Which is set to be equal to x + 2 which is the location
                     of the 2nd int beyond x.
----------------------------------------------------------------------------
  char *argv[8];      cout << argv[2];

pointer notation:     cout << *(argv + 2);
       semantics:     argv + 2 points to the location of the 2nd argument
                      beyond the first argument which is the programs name.
                      Which is then passed to cout.
----------------------------------------------------------------------------
  int x[8];           &x[10] - &x[3];

pointer notation:     &*(x+10)-&*(x+3)
       semantics:     *(x+10) points to the the 10th int beyond x. Then
                      the reference & makes it instead return its location.
                      The same happens for &*(x+3). Since one points to the
                      3rd int beyond x and the other points to the 10th int
                      beyond x the result is the difference 10 - 3 = 7.
----------------------------------------------------------------------------
  char *argv[8];      argv[0]++;

pointer notation:     *argv = *argv + 1;
       semantics:     *argv then points to the start of the programs name.
                      Then by adding 1 to it, it still points to the programs
                      name. But now it points to 1 bit beyond the start of the
                      programs name. Such that the programs name would be
                      /45 instead of the initial ./45 if it were passed to cout.
----------------------------------------------------------------------------
  char *argv[8];      argv++[0];

pointer notation:     *(argv + 1)
       semantics:     *(argv + 1) points to the first argument beyond the
                      programs name.
----------------------------------------------------------------------------
  char *argv[8];      ++argv[0];

pointer notation:     1 + *(argv)
       semantics:     1 + *(argv) then points to the start of the programs name.
                      Then by adding 1 to it, it still points to the programs
                      name. But now it points to 1 bit beyond the start of the
                      programs name. Such that the programs name would be
                      /45 instead of the initial ./45 if it were passed to cout.
----------------------------------------------------------------------------
  char **argv;        ++argv[0][2];

pointer notation:     ++*(*(argv) + 2)
       semantics:     First the outer pointer (the 2) points to the 2nd
                      column. Then the inner pointer
                      points the the 0th element in the 2nd row. Then 1 is
                      added to its contents. Which is of type char.
----------------------------------------------------------------------------
