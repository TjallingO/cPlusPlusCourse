1. Pointer variables and arrays
They are very similar, in that declaring a size_t array of size 10, i.e. size_t array[10] is actually just a pointer to the first element of that array (i.e. array[0] = *array). The difference lies in the fact that the location that an array points to is immutable, whereas a pointer variable can be changed.

2. Pointer variables and reference variables
See the drawing below (Figure 1).

3. Pointer arithmetic
An example of this can be found in Figure 1, part b. It refers to the fact that pointers of a certain type can be incremented or decremented to reach the next element from its starting position. For example, given an integer array named 'intArray', defining an integer pointer *intArray will point it to the start of said array. Thus, *intArray + 1 will point towards the second element in that array, as the pointer now points one integer-sized storage block further than the start of said array. Or rather, it points towards the addresses associated therewith. 

4. explain why accessing an element in an array using only a pointer variable is preferred over using an index expression. By implication: why are repetitions iterating over a series of elements using a pointer-type loop control variable preferred over repetitions in which the loop control variable is, e.g., a size_t type variable?
