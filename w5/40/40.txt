1. Pointer variables and arrays
They are very similar, in that declaring a size_t array of size 10, i.e. size_t array[10] is actually just a pointer to the first element of that array (i.e. array[0] = *array). The difference lies in the fact that the location that an array points to is immutable, whereas a pointer variable can be changed.

2. Pointer variables and reference variables
See the drawing below (Figure 1).

3. Pointer arithmetic
An example of this can be found in Figure 1, part b. It refers to the fact that pointers of a certain type can be incremented or decremented to reach the next element from its starting position. For example, given an integer array named 'intArray', defining an integer pointer *intArray will point it to the start of said array. Thus, *intArray + 1 will point towards the second element in that array, as the pointer now points one integer-sized storage block further than the start of said array. Or rather, it points towards the addresses associated therewith.

4. Accessing an element in an array using only a pointer vs. index expression
Using a pointer will skip a step when accessing an element, which is to determine the size of the array element and add that to the address of the first element. Instead, it can simply move over the size of a single element over and over again. In the exercise, size_t is mentioned, of which the size is known and constant and so elements can be accessed directly. This can be especially true when elements are repeatedly accessed, such as in loops, resulting in cumulative benefits. However, personally, I feel that the index expressions establish a closer link to mathematical equivalents, such as matrices, which makes their use more accessible, and I wonder how much of the advantages are still present given the state of compiler optimisation.
